@page "/qr"
@using SkiaSharp
@using SkiaSharp.QrCode
@using SkiaSharp.QrCode.Image
@using SkiaSharp.Views.Blazor
@using Microsoft.Fast.Components.FluentUI
@using System.ComponentModel.DataAnnotations

<PageTitle>QR</PageTitle>


<h1>QR Code</h1>

<FluentCard>
    <EditForm Model="@Model">
        <p>
            <label>
                QuietZoneSize: @Model.QuietZoneSize
            </label>
        </p>
        <FluentSlider @bind-Value=@Model.QuietZoneSize></FluentSlider>

        <p>
            <label>
                EccLevel:
                <InputSelect @bind-Value="@Model.EccLevel">
                    @foreach (var level in Enum.GetValues(typeof(ECCLevel)))
                    {
                        <option value="@level">@level.ToString()</option>
                    }
                </InputSelect>
            </label>
        </p>

        <p>
            <label>
                ClearColor:
                <CustomInputSelect @bind-Value="@Model.ClearColor">
                    @foreach (var color in typeof(SKColors).GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static).Select(x => (x.Name, Value: x.GetValue(Model.ClearColor))).ToArray())
                    {
                        <option value="@color.Value">@color.Name</option>
                    }
                </CustomInputSelect>
            </label>
        </p>

        <p>
            <label>
                CodeColor:
                <CustomInputSelect @bind-Value="@Model.CodeColor">
                    @foreach (var color in typeof(SKColors).GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static).Select(x => (x.Name, Value: x.GetValue(Model.CodeColor))).ToArray())
                    {
                        <option value="@color.Value">@color.Name</option>
                    }
                </CustomInputSelect>
            </label>
        </p>

        <p>
            <label>
                BackgroundColor:
                <CustomInputSelect @bind-Value="@Model.BackgroundColor">
                    @foreach (var color in typeof(SKColors).GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static).Select(x => (x.Name, Value: x.GetValue(Model.BackgroundColor))).ToArray())
                    {
                        <option value="@color.Value">@color.Name</option>
                    }
                </CustomInputSelect>
            </label>
        </p>

        <p>
            <label>
                Content:
                <InputText @bind-Value="@Model.Content" />
            </label>
        </p>

        <button type="submit" class="btn btn-primary" @onclick="ToggleQrStatus">@(ShowQr ? "Hide QR" : "Generate QR")</button>
    </EditForm>
</FluentCard>


<!-- SkiaSharp.Views.Blazor work on WebAssembly workload. You need `dotnet workload install wasm-tools` before run Blazor WASM. -->
@if (ShowQr)
{
    // Re-render will regenerate QR Code with new contents.
    <SKCanvasView width="512" height="512" OnPaintSurface="OnPaintSurfaceQr" />
}

@code {
    private bool ShowQr { get; set; }
    private QrGenerateModel Model { get; set; } = new QrGenerateModel();

    void ToggleQrStatus()
    {
        ShowQr = !ShowQr;
    }

    void OnPaintSurfaceQr(SKPaintSurfaceEventArgs e)
    {
        var content = Model.Content;

        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.Red);
        using var generator = new QRCodeGenerator();

        // Generate QrCode
        var qr = generator.CreateQrCode(content, Model.EccLevel, quietZoneSize: Model.QuietZoneSize);

        // Render to canvas
        var info = new SKImageInfo(512, 512); // Make sure match with SKCanvasView width & height.
        using var surface = SKSurface.Create(info);
        canvas.Render(qr, info.Width, info.Height, Model.ClearColor, Model.CodeColor, Model.BackgroundColor);
    }

    public class QrGenerateModel
    {
        [Required]
        public string Content { get; set; } = "https://github.com/guitarrapc/SkiaSharp.QrCode";
        [Range(0, 10)]
        public int QuietZoneSize { get; set; } = 4;
        public ECCLevel EccLevel { get; set; } = ECCLevel.L;
        public SKColor ClearColor { get; set; } = SKColors.Transparent;
        public SKColor CodeColor { get; set; } = SKColors.Black;
        public SKColor BackgroundColor { get; set; } = SKColors.White;
    }
}

